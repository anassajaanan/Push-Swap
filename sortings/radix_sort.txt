// =================================================radix sort==========================
int count_bits(int max_num)
{
    int counter = 0;

    while (max_num > 0) {
        counter++;
        max_num /= 2;
    }
    return (counter);
}

int all_bits_zero(t_stack *stack, int bit_position, int min)
{
    int mask;
    struct s_stack_node *p;

    mask = 1 << bit_position;
    p = stack->top;
    while (p)
    {
        if (((p->val - min) & mask) != 0)
            return (0);
        p = p->next;
    }
    return (1);
}

int all_bits_one(t_stack *stack, int bit_position, int min)
{
    int mask;
    struct s_stack_node *p;

    mask = 1 << bit_position;
    p = stack->top;
    while (p)
    {
        if (((p->val - min) & mask) == 0)
            return (0);
        p = p->next;
    }
    return (1);
}

void    radix_sort(t_stack *a, t_stack *b)
{
    int *array = (int *)malloc(sizeof(int) * a->length);
    stack_to_array(array, a, a->length);
    bubble_sort(array, a->length);
    struct s_stack_node *p = a->top;
    while (p)
    {
        for (int i = 0; i < a->length; i++)
        {
            if (array[i] == p->val)
            {
                p->val = i;
                break;
            }
        }
        p = p->next;
    }

    int max_bits = count_bits(a->length - 1);
    int bit_position = 0;

    while (bit_position < max_bits)
    {
        int mask = (1 << bit_position);
        int len_b = b->length;
        int len_a = a->length;
        for (int i = 0; i < len_b; i++)
        {
            if (((b->top->val) & mask) == 0)
            {
                ft_rb(b);
            }
            else
            {
                ft_pa(a, b);
                ft_ra(a);
            }
        }
        for (int i = 0; i < len_a; i++)
        {
            if (((a->top->val) & mask) == 0)
            {
                ft_pb(a, b);
                ft_rb(b);
            }
            else
            {
                ft_ra(a);
            }
        }

        bit_position++;

    }
    while (b->top != NULL)
    {
        ft_rrb(b);
        ft_pa(a, b);
    }

    p = a->top;

    for (int i = 0; i < a->length; i++)
    {
        p->val = array[i];
        p = p->next;
    }
    free(array);
}



RADIX SORT using 3 buckets:
// =================================================radix sort==========================
int count_bits(int max_num)
{
	int counter = 0;

	while (max_num > 0) {
		counter++;
		max_num /= 3;
	}
	return (counter);
}

void    radix_sort(t_stack *a, t_stack *b)
{
	int max_value = get_max(*a);
	int max_bits = count_bits(max_value);
	int bit_position = 0;
	int k = 1;

	while (bit_position < max_bits)
	{
		int zeros = 0;
		int ones = 0;
		int len = a->length;

		for (int i = 0; i < len; i++)
		{
			if ((a->top->val / k) % 3 == 0)
			{
				ft_pb(a, b);
				zeros++;
			}
			else if ((a->top->val / k) % 3 == 1)
			{
				ft_pb(a, b);
				ft_rb(b);
				ones++;
			}
			else
			{
				ft_ra(a);
			}
		}
		while (ones > 0)
		{
			ft_rrb(b);
			ft_pa(a, b);
			ones--;
		}
		while (zeros > 0)
		{
			ft_pa(a, b);
			zeros--;
		}
		k *= 3;
		bit_position++;
	}

}

